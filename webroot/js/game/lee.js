// Generated by CoffeeScript 1.7.1
var BreadthFirstGrid, Position;

Position = (function() {
  function Position(row, col) {
    this.row = row;
    this.col = col;
  }

  Position.prototype.getLeft = function() {
    return new Position(this.row, this.col - 1);
  };

  Position.prototype.getRight = function() {
    return new Position(this.row, this.col + 1);
  };

  Position.prototype.getBottom = function() {
    return new Position(this.row + 1, this.col);
  };

  Position.prototype.getUp = function() {
    return new Position(this.row - 1, this.col);
  };

  return Position;

})();

BreadthFirstGrid = (function() {
  function BreadthFirstGrid(arr, h, w) {
    this.solution = this.getPath(arr, h, w);
  }

  BreadthFirstGrid.prototype.getNeighbours = function(p, row, col) {
    var neighbours, posDown, posLeft, posRight, posUp;
    neighbours = new Array();
    posLeft = p.getLeft();
    if (posLeft.row >= 0 && posLeft.row < row && posLeft.col >= 0 && posLeft.col < col) {
      neighbours.push(posLeft);
    }
    posRight = p.getRight();
    if (posRight.row >= 0 && posRight.row < row && posRight.col >= 0 && posRight.col < col) {
      neighbours.push(posRight);
    }
    posUp = p.getUp();
    if (posUp.row >= 0 && posUp.row < row && posUp.col >= 0 && posUp.col < col) {
      neighbours.push(posUp);
    }
    posDown = p.getBottom();
    if (posDown.row >= 0 && posDown.row < row && posDown.col >= 0 && posDown.col < col) {
      neighbours.push(posDown);
    }
    return neighbours;
  };

  BreadthFirstGrid.prototype.getPath = function(arr, row, col) {
    var current, grid, i, j, neighbour, neighbours, p, queue, _i, _len;
    grid = Array();
    i = 0;
    while (i < row) {
      j = 0;
      p = new Array();
      while (j < col) {
        p.push(0);
        j++;
      }
      grid.push(p);
      i++;
    }
    queue = new PriorityQueue(function(a, b) {
      if (grid[a.row][a.col] < grid[b.row][b.col]) {
        return -1;
      } else if (grid[a.row][a.col] > grid[b.row][b.col]) {
        return 1;
      } else {
        return 0;
      }
    });
    i = 0;
    while (i < arr.length) {
      j = 0;
      while (j < arr[i].length) {
        if (arr[i][j] === 'start') {
          queue.enq(new Position(i, j));
          grid[i][j] = 0;
        }
        j++;
      }
      i++;
    }
    console.log(queue.peek());
    while (!queue.isEmpty()) {
      current = queue.deq();
      neighbours = this.getNeighbours(current, row, col);
      for (_i = 0, _len = neighbours.length; _i < _len; _i++) {
        neighbour = neighbours[_i];
        if (arr[neighbour.row][neighbour.col] === 'void' && grid[neighbour.row][neighbour.col] === 0) {
          grid[neighbour.row][neighbour.col] = grid[current.row][current.col] + 1;
          queue.enq(neighbour);
        }
        if (arr[neighbour.row][neighbour.col] === 'end') {
          return grid;
        }
      }
    }
    return grid;
  };

  return BreadthFirstGrid;

})();

//# sourceMappingURL=lee.map
